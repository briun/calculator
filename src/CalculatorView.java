import javax.swing.*;
import java.awt.*;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;

public class CalculatorView extends JFrame implements ActionListener, Observer {

    private final JTextField outputPanel;
    private final Calculator calculator; // A reference to the calculator logic


    public CalculatorView() {
        // --- 1. Instantiate the calculator logic and register as an observer ---
        this.calculator = new Calculator();
        this.calculator.addObserver(this);

        // --- 2. Set up the main window (JFrame) ---
        setTitle("Calculator View");
        setSize(350, 450);
        setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        setLocationRelativeTo(null);
        setLayout(new BorderLayout(10, 10));

        // --- 3. Create the output display panel ---
        outputPanel = new JTextField();
        outputPanel.setEditable(false);
        outputPanel.setBackground(Color.WHITE);
        outputPanel.setFont(new Font("SansSerif", Font.BOLD, 32));
        outputPanel.setHorizontalAlignment(JTextField.RIGHT);
        outputPanel.setBorder(BorderFactory.createEmptyBorder(10, 10, 10, 10));
        add(outputPanel, BorderLayout.NORTH);

        // --- 4. Create the panel for the buttons ---
        JPanel buttonGridPanel = new JPanel();
        buttonGridPanel.setLayout(new GridLayout(4, 4, 10, 10));
        buttonGridPanel.setBorder(BorderFactory.createEmptyBorder(10, 10, 10, 10));

        // --- 5. Define button labels and create buttons ---
        String[] buttonLabels = {
                "7", "8", "9", "/",
                "4", "5", "6", "*",
                "1", "2", "3", "-",
                "C", "0", "=", "+"
        };

        for (String label : buttonLabels) {
            JButton button = new JButton(label);
            button.setFont(new Font("SansSerif", Font.BOLD, 20));
            button.addActionListener(this);
            if (label.equals("C")) {
                button.setForeground(Color.RED);
            }
            buttonGridPanel.add(button);
        }
        add(buttonGridPanel, BorderLayout.CENTER);
    }

    /**
     * This method is called by the Calculator when the display needs to be updated.
     * @param displayValue The new string to show in the output panel.
     */
    @Override
    public void update(String displayValue) {
        outputPanel.setText(displayValue);
    }

    /**
     * This method is called whenever a button is clicked.
     * It delegates the action to the Calculator logic object.
     *
     * @param e The event generated by the button click.
     */
    @Override
    public void actionPerformed(ActionEvent e) {
        String command = e.getActionCommand();
        // Forward the user action to the calculator logic controller
        switch (command) {
            case "C":
                calculator.pressClear();
                break;
            case "=":
                calculator.pressEquals();
                break;
            case "+":
            case "-":
            case "*":
            case "/":
                calculator.pressOperator(command);
                break;
            default: // It must be a digit
                calculator.pressDigit(command);
                break;
        }
    }

    public static void main(String[] args) {
        SwingUtilities.invokeLater(() -> {
            CalculatorView view = new CalculatorView();
            view.setVisible(true);
        });
    }
}
